pipeline {
    agent any
    environment {
        VERSION='0.10'
        OCI_URI='registry-vecps-ns.gaccloud.com.cn/tenant-eaws'
    }
    stages {
        stage('Build') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'oci-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''docker login -u=${USERNAME} -p=${PASSWORD} registry-vecps-ns.gaccloud.com.cn
docker pull ${OCI_URI}/nginx:1.21-alpine
docker pull ${OCI_URI}/node:18
docker tag ${OCI_URI}/node:18 node:18
docker tag ${OCI_URI}/nginx:1.21-alpine nginx:1.21-alpine
docker build -t ${OCI_URI}/cloud_simpro_front:${VERSION} .
'''
                }
            }
        }
        stage('Check') {
            steps {
                echo "Check"
            }
        }
        stage('Image Push') {
            steps {
                sh '''docker push ${OCI_URI}/cloud_simpro_front:${VERSION}
docker system prune -f
                '''
            }
        }
        stage('Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-config', namespace:'',restrictKubeConfigAccess: false, serverUrl: ''){
                    sh '''kubectl get pod -owide
envsubst < cicd/cloud-simpro-front.yml | kubectl apply -f -
'''
                }
            }
        }
    }
    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
        success {
            echo 'success'
        }
        failure {
            echo 'failure'
        }
    }
}
